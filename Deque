import java.util.* ;
import java.io.*; 


public class Deque 
{
    int[] q=new int[100];
    int r,f,s=101;
    // Initialize your data structure.
    public Deque(int n) 
    {
        // Write your code here.
        f=-1;
        r=-1;
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    public boolean pushFront(int x) 
    {
        // Write your code here.
        if(this.isFull())
        return false;
        if(f==-1)
        {
            f=0;r=0;
        }
        else
        {
            f=(f-1)%s;
            q[f]=x;

        }
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    public boolean pushRear(int x) 
    {
        // Write your code here.
        if(this.isFull())
        return false;
        r=(r+1)%s;
        if(f==-1)
        f=0;
        q[r]=x;
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    public int popFront() 
    {
        // Write your code here.
        if(this.isEmpty())
        return -1;
        int x=q[f];
        if(f==r)
        {
            f=-1;
            r=-1;
        }
        f=(f+1)%s;
        return x;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    public int popRear() 
    {
        // Write your code here.
        if(this.isEmpty())
        return -1;
        int  x=q[r];
        r=(r-1)%s;
        return x;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    public int getFront() 
    {
        // Write your code here.
        
        if(isEmpty())
        return -1;
        return q[f];
        
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    public int getRear() 
    {
        // Write your code here.
        if(isEmpty())
        return -1;
        return q[r];
    }

    // Returns true if the deque is empty. Otherwise returns false.
    public boolean isEmpty() 
    {
        // Write your code here.
        if(f==-1)
        return true;
        return false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    public boolean isFull() 
    {
        // Write your code here.
        if((r+1)%s==f)
        return true;
        return false;
    }
}
